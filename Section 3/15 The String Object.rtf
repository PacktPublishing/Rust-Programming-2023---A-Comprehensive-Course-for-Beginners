{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh7840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
What is The String Object\
\
The String object type is derived from the Standard Library. \
While the string literal is part of the core language, the string object type is not a part of the core language. \
String is in a growing collection and is mutable and UTF-8 encoded type. \
The String object type can be used to represent string values that are provided at runtime. \
String object is allocated in the heap.\
\
\
*/\
\
\
// Example to create a string Object new for empty and we can use from to input\
\
fn main()\{\
   let nothing_within = String::new();\
   println!("length of this string is \{\}",nothing_within.len());\
\
   let great_movie = String::from("The Big Lebowski");\
   println!("length is \{\}",great_movie.len());\
   \
   // push method\
   let mut greeting = String::from("tom says ");\
   greeting.push_str("hello");\
   println!("\{\}",greeting);\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx6546\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0     // Convert a string literal to a string object\
   let random_string = "Please make me an onbject!".to_string();\
   println!("\{\}",random_string);   \
   \
   // Solution \
   \
   let mut password = "pokemon,".to_string();\
   password.push_str(" gotta catch them all");\
   println!("\{\}",password);\
\}\
\
/*\
\
\
STRING OBJECT METHODS:\
\
1	new()	pub const fn new() 
\f1 \uc0\u8594 
\f0  String	Creates a new empty String.\
2	to_string()	fn to_string(&self) 
\f1 \uc0\u8594 
\f0  String	Converts the given value to a String.\
3	replace()	pub fn replace<'a, P>(&'a self, from: P, to: &str) 
\f1 \uc0\u8594 
\f0  String	Replaces all matches of a pattern with another string.\
4	as_str()	pub fn as_str(&self) 
\f1 \uc0\u8594 
\f0  &str	Extracts a string slice containing the entire string.\
5	push()	pub fn push(&mut self, ch: char)	Appends the given char to the end of this String.\
6	push_str()	pub fn push_str(&mut self, string: &str)	Appends a given string slice onto the end of this String.\
7	len()	pub fn len(&self) 
\f1 \uc0\u8594 
\f0  usize	Returns the length of this String, in bytes.\
8	trim()	pub fn trim(&self) 
\f1 \uc0\u8594 
\f0  &str	Returns a string slice with leading and trailing whitespace removed.\
9	split_whitespace()	pub fn split_whitespace(&self) 
\f1 \uc0\u8594 
\f0  SplitWhitespace	Splits a string slice by whitespace and returns an iterator.\
10	split()	pub fn split<'a, P>(&'a self, pat: P) 
\f1 \uc0\u8594 
\f0  Split<'a, P> , where P is pattern can be &str, char, or a closure that determines the split.\
Returns an iterator over substrings of this string slice, separated by characters matched by a pattern.\
11	chars()	pub fn chars(&self) 
\f1 \uc0\u8594 
\f0  Chars	Returns an iterator over the chars of a string slice.\
\
\
*/\
\
// *********** ************** *************\
\
/*\
\
Exercise: Manipulating String Objects in Rust \
\
1. In the main function, Create a string literal named password and assign it the value of "pokemon," \
2. Using the String Object push method, modify the password so that it includes " gotta catch them all"\
3. Print the result and share your solution on the discord in the Rust channel! \
\
*/\
}