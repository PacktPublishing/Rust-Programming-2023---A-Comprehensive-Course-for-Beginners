{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh7840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
Integers In Rust\
\
Integers in Rust are numbers without decimals or number that are not fractionalized\
Simply put, integers are data types that represent whole numbers. \
\
Within the umbrella of integers you have signed and unsigned version that you can specify\
\
Signed integers store both negative and postivie values\
\
Unsigned integers may only store positive values\
\
In addition, the size of an integer can be set to arch.\
\
Setting an integer to arch derives the size of the integer to the architecture of the machine\
IE if you set it to 64bits then x64 machine\
\
*/\
\
// Examples\
\
\
fn main() \{\
\
    let total = 4; // i32 by default\
    let height:u32 = 41;\
    let deduction:i32 = 2-200;\
    println!("the total is \{\}",total);\
    println!("the height is \{\} and the deduction is \{\}",height,deduction);\
    \
    // Solution\
       let time:u16 = 65535;\
\
   // 0 to 255 only allowed for u8\
   let overtime_1:u16 = 65536;   //overflow value is 0\
   let overtime_2:u16 = 65537;   //overflow value is 1\
\
   println!("time \{\} ",time);\
   println!("overflow value 1 is \{\}",overtime_1);\
   println!("overflow value 2 \{\}",overtime_2);\
\}\
\
/*\
\
The Integer Range\
\
Signed integers can store numbers from -2^(n-1) to 2^(n-1) -1, \
where n is the number of bits of the variant. \
For example, i16 can store numbers from -(2^15) to 2^15 -1 \uc0\u8722  here we replaced n with 16.\
\
Unsigned integers can store numbers from 0 to (2^n)-1. \
For example, u16 can store numbers from 0 to (2^16)-1, which is equal to 0 to 65535.\
\
The Integer Overflow\
\
An integer overflow occurs when the value assigned to an integer variable exceeds \
the Rust defined range for the data type and starts at 0. Let us understand this with an example \uc0\u8722 \
\
Exercise:\
\
1. In the main function create an unsigned variable of 16 bits to the max total of the range formula\
applied to 16 bits. \
\
2. Create two more variables, overtime_1 and overtime_2 where overtime_1 has an overflow value of 0\
and overtime_2 has an overflow value of 1.\
\
3. Print your results and check your console for errors. **Important hint: the console \
solution should display warning errors since your code should experience overflow.\
\
Good luck!\
\
*/\
\
}