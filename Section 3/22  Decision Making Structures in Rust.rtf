{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
Decision Making Structures in Rust\
\
Decision making structures check statement evaluations and make various outputted decisions programatically based\
on the conditions of the statement - whether they may be be true or alternatives if they are false etc\
\
\
if statement\
\
An if statement consists of a true or fase expression followed by one or more statements.\
\
2	\
\
if...else statement\
\
 An if else statement in programming is a conditional statement that runs a different \
 set of statements depending on whether an expression is true or false - Boolean.\
\
3	\
\
else...if and nested ifstatement\
\
You can nest one if or else if statement inside another if or else if statement(s) and so on and so forth.\
\
4	\
\
match statement\
\
A match statement, similar to the Switch statement in C, allows a variable to be tested against a list of values.\
\
*/\
\
fn main() \{\
\
    // if statement example:\
    \
   let num:i8 = 2;\
   if num > 1 \{\
      println!("number is greater than 1") ;\
   \}\
    \
    // if else statement example:\
    \
   let user = "todd";\
   if user.len() == 4 \{\
      println!("Pass");\
   \} else \{\
      println!("Fail");\
   \}\
   \
   // else if - nested ladders\
   \
   let password = "su".to_string();\
   let pass_num = password.len();\
   if pass_num > 3 \{\
      println!("thank you for providing a password");\
   \} else if pass_num < 3 \{\
      println!("Your password is too short. Please choose a longer password");\
\}\
\
   let microbiome = "xc12";\
   let body_part = match microbiome \{\
      "xc12" => \{println!("Found match for xc12"); "Tummy Biome"\},\
      "mpt1" => "Eye Biome",\
      "tttw56" => "finger biome",\
      _ => "Unknown"\
   \};\
   println!("The biome match is \{\}",body_part);\
    \
\
// Exercise Solution\
\
    const x: i32 = 3;\
    const y: i32 = 4;\
    \
    if x < y && x > 6 \{\
        println!("fail"); \
        \} else if x < y || x > 6 \{\
        println!("success");\
        \} else \{ println!("please try again");\
    \} \
\}\
\
/*\
\
Exercise: Decision Making Structures in Rust\
\
1. Write two signed 32 bit constants x and y and assign x the value 3 and y the value 4\
2. Check to see whether or not the x is less than y and x is greater than 6\
3. If the check passes print into the console the following string: "fail"\
4. If the check provides a false boolean conduct the following tests:\
 check if x is less than y or x is greater than 6\
If the second test passes print the following string into the console: "success"\
Is the second test fails print the following string into the console: "please try again"\
*/}