{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
Slices in Rust\
\
Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection. \
A slice is a kind of reference, so it does not have ownership.\
\
Slices essentially point to data.\
They are passed by reference to functions ie borrowing. You can use them to fetch portions of data and customize\
what you want to slice.\
\
*/\
\
\
// Slice Example \
\
fn main() \{\
   let game = "Mario Brothers".to_string();\
   println!("length of the game is \{\}",game.len());\
   let slice = &game[0..5]; \
   println!("\{\}",slice);\
   \
   // Exercise Solutio n\
    let mut nums = [1,2,3,4,5];\
   slice_and_dice(&mut nums[1..3]);\
   // passes references \
   println!("\{:?\}",nums);\
\}\
\
fn slice_and_dice(slice:&mut [i32]) \{\
   println!("length of slice is \{:?\}",slice.len());\
   println!("\{:?\}",slice);\
   slice[0] = 200; \
\}\
\
/*\
\
1. Create an array with the values 1 through 5 called nums. \
2. Print the values of nums.\
3. Write a function called slice_and_dice which takes an array as a parameter and prints the length of the \
array. It should also print the updated value of the array. The function should also replace the first index value\
in the array to 200.\
4. Call the slice and dice function in the main function and slice out the values 2 and 3 from the array. \
\
There are a few little tricks here so be vigilent and good luck!\
\
*/}