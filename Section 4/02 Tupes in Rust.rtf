{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
** Tuples in Rust **\
\
Tuples are compound data types. A scalar type, or the variables \
we've seen so far, can store only one type of data.\
For example, an u32 variable will only store a single integer value. \
Compound types can store multiple values at the same time of different types. \
\
Tuples have a fixed length - once declared they cannot grow or shrink in size. \
The tuple index starts from 0.\
\
*/\
\
// tuple example\
\
fn main() \{ \
   let tuple:(i8,f32,i32) = (2, 2.333, 22);\
   println!("\{:?\}",tuple);\
   println!("first value is :\{:?\}",tuple.0);\
   \
   // exercise solution\
   let user2:(i32,bool,&str) = (30,true,"Jack");\
   user_data(user2);\
\}\
\
// exercise solution\
\
fn user_data(x:(i32,bool,&str))\{\
   let (age,active,name) = x; //assigns a tuple to distinct variables\
   println!("age: \{\}, active: \{\}, name: \
   \{\}",age,active,name);\
\}\
\
/*\
\
Destructing Tuples in Rust\
\
1. Create a function user_data which takes the tuple x as a parameter containing a\
signed integer 32 bits, a boolean, and a string literal (hint: use the &str keyword to point\
the reference)\
2. In the function assign a tuple to distinct variables by naming the integer: age, \
boolean: active, and string literal: name. BIG HINT: let (integer, bool, and string) = x \
3. Write instructions in the function to print the age, active status and name\
4. In the main function, create a new tuple, user2 and set the user data so that the user is\
30 years old, active status is true, and his name is Jack\
5. Invoke the user_data passing in user2 as the argument and check the console for your result\
\
Good luck! \
\
*/}