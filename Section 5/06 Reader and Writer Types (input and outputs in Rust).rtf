{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
Reader and Writer Types (input and outputs in Rust)\
\
Rust\'92s standard library features for input and output are organized around two traits \uc0\u8722 \
\
Read\
Write\
\
1	\
Read\
\
Methods for byte-oriented input: readers\
\
Stdin,File\
\
2	\
Write\
\
Support both byte-oriented and UTF-8 text output: writers\
\
Stdout,File\
\
*/\
\
use std::fs::File;\
use std::io::\{Error, Read, BufReader\}; // buff reader provides a buffering component for reading\
\
fn main() -> Result <(), Error> \{\
    \
    // write \
    let file_name = "cat.txt";\
    match File::create(file_name) \{\
        Ok(file) => println!("writing \{:?\}", file),\
        Err(_) => println!("unable to create the file \{\}", file_name)\
    \}\
    \
    // open\
    match File::open(file_name) \{\
        Ok(file) => println!("reading \{:?\}", file),\
        Err(_) => println!("unable to open the file \{\}", file_name)\
\}\
\
    // read\
    \
    let file = File::open(file_name)?;\
    let mut reader = BufReader::new(file);\
    let mut contents = String::new();\
    \
    reader.read_to_string(&mut contents)?;\
    println!("this is the contents..\{\}", contents);\
    Ok(())\
\}\
\
\
 \
 \
}