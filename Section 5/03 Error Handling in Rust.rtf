{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
\
Error Handling in Rust\
\
In programming there are recoverable errors. Recoverable errors are errors which do not cause the program to fail for ex:\
'The file type you specified is incorrect'\
\
Unrecoverable errors cause the program to fail such as trying to access locations outside of a datastructure. \
\
This allows a program to terminate immediately and provide feedback to the caller of the program.\
\
This macro is the perfect way to assert conditions in example code and in tests. panic! is closely \
tied with the unwrap method of both Option and Result enums. Both implementations call panic! when they are set to None or Err variants.\
\
1	unwrap	\
unwrap(self): T\
\
Expects self to be Ok/Some and returns the value contained within. If it is Err or None instead, it raises a panic with the contents of the error displayed.\
\
2	expect	\
expect(self, msg: &str): T\
\
Behaves like unwrap, except that it outputs a custom message before panicking in addition to the contents of the error.\
\
Enum:\
Result\
OK, Err - variants\
\
\
*/\
\
use std::fs::File;\
\
 fn main() \{\
 \
     // panic!("This will cause the program to abruptly end");\
     \
     // let f = File::open("doesnotexist.txt").expect("No such thing!");\
     \
     let solution = is_seven(8).unwrap();\
     println!("the solution is \{\}", solution);\
     println!("The progam is working here");\
\
 \} \
 \
 fn is_seven(n:i32) -> Result <bool,String> \{\
     if n == 7 \{\
        return Ok(true);\
     \} else \{\
        return Err("This is not seven".to_string());\
     \}\
 \}\
 \
 /*\
 \
 Exercise - Write Error Handling for A Program in Rust\
\
1. Write a function is_seven which checks whether or not the input is the number 7 and returns true if so and \
an error ie (return Err("...")) if it is not true. If it is true return OK(?) - these variannts ERR and OK come from the Enum\
Result. The function can return multiple datatypes \
\
2. create a variable 'solution' in the main function which is assigned calling the is_seven function testing various inputs.\
\
3. print the solution variable in the program\
\
*/}