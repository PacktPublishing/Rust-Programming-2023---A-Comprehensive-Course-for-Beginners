{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14020\viewh14620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
/*\
\
Concurrency in Rust\
\
When you want to have different parts of a program execute independantly you are looking at the concept of concurrency.\
Whereas with parralel programming you have different parts of the program or computers executing at the same time \
Both of these models stem from the core feature of multiple processing\
\
Threads\
\
We use threads to run codes at the same time. \
Operating systems manage multiple processes at once and programs execute code in a process\
\
When you have independant parts of your code that run together you are using the feature of multi threaded programming\
\
How To Create A Thread in Rust\
\
We can create threads in Rust with thread::spawn \
\
The parameter for the spawn is a closure which defines the code\
\
Every thread is equipped with some basic low-level blocking support, \
via the thread::park function and thread::Thread::unpark method. \
park blocks the current thread, \
which can then be resumed from another thread by calling the unpark method on the blocked thread\'92s handle.\
\
*/\
\
//import modules\
\
use std::thread;\
use std::time::Duration;\
\
fn main() \{\
\
let parked_thread = thread::Builder::new()\
    .spawn(|| \{\
        println!("Parking thread");\
        thread::park();\
        println!("Thread unparked");\
    \})\
    .unwrap();\
\
// Let some time pass for the thread to be spawned.\
thread::sleep(Duration::from_millis(10)); // switch to zero \
\
println!("Unpark the thread");\
parked_thread.thread().unpark();\
\
// parked_thread.join().unwrap();\
//  The join() method on JoinHandle waits for the associated thread to finish.\
\
\
    // Exercise Solution\
\
   let x = thread::spawn(|| \{\
      for i in 1..20 \{\
         println!("spawn thread: \{\}", i);\
         thread::sleep(Duration::from_millis(1));\
      \}\
   \});\
   for i in 1..5 \{\
      println!("main thread: \{\}", i);\
      thread::sleep(Duration::from_millis(2));\
   \}\
   x.join().unwrap();\
\
\}\
\
/*\
\
Exercise - Build your own threads in Rust\
\
1. Create two definite loops in the main function.\
\
2. One loop should be set to a spawn thread x which runs from 1 to 20 with a sleep duration\
of half the time of the main thread loop. The spawn thread should also print the index values of each\
iteration as it loops til completion. \
\
3. The other loop should run in the main thread with a sleep duration of twice the time of the spawn threaded loop.\
The loop should run only from 1 to 5 and should also print each index valued tagged as the main thread. \
\
4. Ensure the spawn thread has a full completion of its run even if the main thread finishes \
\
\
*/}